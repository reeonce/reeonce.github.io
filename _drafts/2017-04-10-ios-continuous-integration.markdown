---
layout: post
title: 走向持续集成的光明大道
category: ios
tags: [jenkins, ios, ci]
---

### 小明很懒，也不想背锅

场景1：

测试美眉走到小明身旁，露出微笑，掏出手机，“小明哥，能不能给我装个最新的应用呀？” “好的，等一下。”

产品经理坐到小明旁边的座位，掏出手机，“小明呀，那个新开发的功能啥效果？给我装一个我看看。” “好的，马上。”

销售小刘路经小明工位，掏出手机，“哥，听说最近开发了个炫酷狂拽的新功能？用户想看，给我装个呗？” “喔，可以。”

小明作为一个极懒的程序员，对这种重复的低级劳动，很是反感。


场景2：

深夜12点半了，小明在做着上线前的最后奋战。终于在测试美眉的第六遍测试完成后，小明松了一口气。接下来的事情，小明算是轻车熟路了，但是却绝不能掉以轻心。关闭代码中的日志开关，注释掉测试数据，修改版本，点击arachive，等待编译完成后提交应用，发送群邮件，前前后后半小时。小明安心地回家休息了。

一周后，小明查看了下崩溃日志，“我X，crash 也太多了吧，这下药丸。”小明有些慌，赶紧打开代码相应的类中，发现有个变量打错了。“真是f_ck!”

我相信，不少程序员经常会碰到类似的场景。于是聪明的程序员就开始用脚本来做这类工作。还好，经过不断的演进，现已经形成了一套非常成熟的workflow，它就是**持续集成**。

### 关于持续集成

持续集成已经被公认为极具价值的一项工程实践。在初始化一个项目时一个重要的任务就是搭建持续集成服务器，编写构建脚本。
引入了CI（Continuos Integration，即持续集成）以后，每个开发人员在提交代码的时候都会自动进行构建，包括代码审查、编译、单元测试、打包、功能测试等。这样保证了开发人员的每次提交都是安全的。打包生成的文件随时可以被测试人员拿去测试。如果需要给客户演示功能，也只需从CI服务器上直接获取指定的打包完成的文件即可。

CI的好处多多。

减少风险
缺陷的检测和修复变得更快，让寻找和修改bug的工作变简单（只修改系统一小部分，无需看太多代码。由于提交后就可以得到反馈，记忆很新鲜，可以进行差异调试。）同时过早的引入集成，使我们能更好的审视各个模块的接口是否满足要求，减少项目中的假定。

减少重复过程
由于CI将大量的工作给自动化了，那么可以让人们有时间做更多的需要动脑筋的、更高价值的工作。而且通过对重要过程自动化，克服了项目中某些成员对实现改进的抵制，有利于持续集成的推进。这样就形成了一个良性循环。

在任何时间、任何地点生成可部署的软件
对于客户来说，可以部署的软件是最实际的资产。而CI则可以轻松做到这一点。

增强项目的可见性
通过对CI服务器的监控，可以随时了解项目的趋势。CI上的红色或绿色表示了当前项目的健康程度。每一个功能的交付都经历了单元测试或集成测试的考验。

对开发团队的软件产品建立起更强大的产品信心
CI可以防止破窗综合症，让开发团队一点点积累起对产品的信息。

CI对团队的要求
很多团队说我们引入了持续集成，但是收到的效果并不好。比如遇到了CI持续失败、没人关注构建结果、没有及时修复build等。那是因为开发团队没有遵循一定的原则。

经常提交代码

不要提交无法构建的代码

立即修复无法集成的构建

编写自动化的开发者测试

必须通过所有测试和审查

执行私有构建

避免迁出无法构建的代码

http://www.cnblogs.com/huang0925/p/3333484.html

Steve McConnell在《Code Complete》里提到，持续集成（书中使用Incremental Integration的术语）有以下几点好处：
l  易于定位错误。也就是当你的持续集成失败了，说明你新加的代码或者修改的代码引起了错误，这样你很容易的就可以知道到底是谁犯了错误，可以找谁来讨论。
l  及早在项目里取得系统级的成果。因为代码已经被集成起来了，所以即使整个系统还不是那么可用，但至少你和你的团队都已经可以看到它已经在那了。
l  改善对进度的控制。这点非常明显，如果每天都在集成，当然每天都可以看到哪些功能可以使用，哪些功能还没有实现。如果你是程序员，你不用在汇报任务的时候说我完成了多少百分比而烦恼，而如果你是项目经理的话，那么你也不再烦恼程序员说完成了编码的50%到底是个什么概念。
l  改善客户关系。理由同上。
l  更加充分地测试系统中的各个单元。这也是我们常讲的Daily Build与Smoke Test相结合带来的绝大好处。
l  能在更短的时间里建造整个系统。这点恐怕要你实施以后才能得出结论。就我们而言，持续集成并没有为每个项目都缩短时间，但却比没有实施时，项目更加可控，也更加有保证。

随着时间的推移，持续集成带来的更多好处，也逐渐被认识到了，比如说：
l  有助于项目的开发数据的收集。比如说，项目代码量的变化，经常出错的Tests，经常出错的source code，等等。
l  与其它工具结合的持续代码质量改进。如与CheckStyle, PMD, FindBugs, Fxcop等等等等的结合。
l  与测试工具或者框架结合的持续测试。如与xUnit，SilkTest, LoadRunner等等的结合。
l  便于Code Review。在每个build里，我们都可以知道与前一个build之间有什么改动，然后针对这些改动，我们就可以实施Code Review了。
便于开发流程的管理。比如说，要把一个开发的build提交给测试组作测试，测完满意了，再提交到发布组去发布。

http://blog.csdn.net/leijiantian/article/details/7916483

### 小试牛刀


### 更懒一点

fastline
